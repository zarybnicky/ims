# (add-to-list 'org-latex-classes
#           '("koma-article"
#              "\\documentclass{scrartcl}"
#              ("\\section{%s}" . "\\section*{%s}")
#              ("\\subsection{%s}" . "\\subsection*{%s}")
#              ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
#              ("\\paragraph{%s}" . "\\paragraph*{%s}")
#              ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+LaTeX_CLASS: koma-article
#+OPTIONS: toc:nil
#+TITLE: Cost Efficiency versus Quality of Service in Autoscaling Web Services
#+AUTHOR: Jakub Zárybnický

QoS vs cost efficiency

Minimum average queue time vs minimum cost (and some hard constraints,
e.g. queue time < 10ms)

The problem that I've chosen to focus on is this: How to provide maximum service
availability while being as cost-efficient as possible? The platform that I
assume is a web-service that uses a simple high-availability solution: a single
load-balancer, behind which there are several replicas (or instances) of the
application server. Having a running replica costs money (a fixed cost per
second, as is common in big cloud service providers), and we're trying to
minimize our costs while providing a good user experience.

There may be some hard constraints imposed on the simulation - e.g. the maximum number
of replicas may be limited (by the cloud provider or by the company's CFO), we
may have a specific hard upper limit on the quality, etc.

I've chosen to represent quality-of-service as the time spent in the queue while
waiting before a request starts being processed. This disregards a number of
factors - the time spent processing a request, the time spent waiting for the
database, ... These factors will be included as a random variable, but to
simplify the model, I won't specify them in detail - as simulating e.g. database
congestion or data consistency is a large topic, and I'll focus on replica
scaling.

Analytic solution of this system would be possible, but with my current
mathematical knowledge, I'd have difficulties representing it in its entirety.

The 'solution' we're looking for here are three parameters: minimum active
replicas, maximum active replicas, and the auto-scaler thresholds.

Inspiration:
The topic of this work was inspired by my personal experiences and several
interesting problems in my day job. Most of the information presented in the
Analysis section were things that I've slowly accumulated over my IT career, and
any references that I'd find would be retrospective. Nonetheless, I've attempted
to back non-conceptual facts by references.

https://www.researchgate.net/publication/261759640_A_queuing_theory_model_for_cloud_computing
solves a similar problem, focusing on different parameters.

http://ieeexplore.ieee.org/document/6194446/ solves a similar problem using
analytical methods.

Facts:
- we assume that the number of replicas that we can potentially use is
  unlimited - in practice, the number will be very high, but limited - but this
  fact is unimportant, as I expect that in most simulations, we'll have a fixed
  cap on the number of replicas
- replica start time - in practice, this is a number that depends on the type of
  machine that we use - spinning up a physical server may take 45s
  (https://serverfault.com/questions/179714/fastest-time-to-get-an-ec2-instance-running),
  starting a full virtualized machine half that (as the hardware is already
  running), starting a simple Docker container takes less then 0.5s on my
  machine (as the kernel used is already running), and starting a worker process
  is nearly instantaneous.
- replica shutdown time - instantaneous, as we disconnect a replica before
  shutting it down.
- client timeout - most web browsers use very large timeouts on the order of minutes
  (https://stackoverflow.com/questions/5798707/browser-timeouts), so apart from
  a few simulations, I won't be using timeouts
- quality of service - a very wide term, in this model, I'll be using it to mean
  the time spent in replica queue
- we are interested only in the time spent in the queue, not in TTFB, database
  congestion (this is a big topic to model, depends on db model (single-process
  vs eventual consistency vs slow+immediate consistency)), nor processor utilization
- auto-scaler properties - variable. The auto-scaler is a (meta)process that
  starts and stops replicas based on the utilization of the system. It attempts
  to keep the system to an ideal utilization (a parameter), constrained by a
  minimum and maximum of replica amount. It needs to take into account the
  start-up and shut-down time as well. I'll simulate the auto-scaler as a
  periodic event that looks at the utilization (used vs total capacity) of the
  available replicas.
- request processing time - this is an arbitrary value. To simulate
  different request types, I'll use a variable-time delay (switching between
  several values based on their probability).
- assumption - single-threaded machines. This is an unrealistic assumption, as
  modern web servers are capable of handling hundreds of thousands of requests
  per second (e.g. http://www.aosabook.org/en/posa/warp.html), but it simplifies
  simulation quite a bit (as it would require e.g. an array of Stores). However,
  as we're interested in queue times and not e.g. TTFB (time-to-first-byte) or
  load times, this affects especially start-up and shut-down time factors, as in
  real-life auto-scalers, it's CPU utilization that's the deciding factor, and
  not the amount of free sockets. This simulation then most closely represents
  modern single-threaded servers (e.g. Node.js), but even they use select, epoll
  or kqueue to add quasi-parallelism. From another point-of-view, this could
  also represent OS worker processes (not green threads), as used by e.g. Nginx.
- assumption - zero replica failure. As the simulation time frame is not very
  long and the reliability guaranteed cloud providers ranges from 98% to 99.999%
  (e.g. https://www.forpsicloud.cz/vseobecne-podminky.aspx), we can safely
  disregard this factor without much impact on the results.
- assumption - ideal load balancer. In practice, high-availability (HA) is
  implemented as a combination of HA DNS servers that direct users to several
  (possibly geographically separated) load balancers, which then distribute
  traffic among several web-servers
  (e.g. https://www.digitalocean.com/community/tutorials/how-to-configure-dns-round-robin-load-balancing-for-high-availability). I
  assume an ideal load balancer that works without hardware failures, and
  that forwards requests instantaneously.
- a simplification that could be removed if I used another approach - all
  requests share a single queue. If I didn't rely on the single Store for
  time-based statistics and if I manually updated a single TStat object, I could
  use a vector/array/... of Facilities (or perhaps of Stores to even simulate
  multiprocessing capabilities).

Experimenting:

Several auto-scaler settings: one replica only (baseline), ten replicas,
auto-scaling with a target of 50% utilization (45% and 55% thresholds),
auto-scaling with a target of 80% utilization (75% and 85% thresholds).

Several request generators: linear generator generates requests using a static
exponential distribution; burst generator generates bursts of requests using an
exponential distribution as well - one burst is an evenly spaced sequence of
requests; varying-intensity generator uses an exponential distribution as well,
but the mean time between requests oscillates between two values (a fixed-size
step after every request).

* Úvod
Úvod musí vysvětlit, proč se celá práce dělá a proč má uživatel výsledků váš
dokument číst (prosím, projekt sice děláte pro získání zápočtu v IMS, ale mohou
existovat i jiné důvody). Případně, co se při čtení dozví.

Například:

v této práci je řešena implementace ..., která bude použita pro sestavení modelu
...  na základě modelu a simulačních experimentů bude ukázáno chování systému
... v podmínkách ...  smyslem experimentů je demonstrovat, že pokud by ..., pak
by ...

Poznámka: u vyžádaných zpráv se může uvést, že zpráva vznikla na základě
požadavku ... (u školní práce takto zdůvod'novat projekt ovšem nelze, že). Je
velmi praktické zdůvodnit, v čem je práce náročná a proto přínos autora
nepopiratelný (např. pro zpracování modelu bylo nutno nastudovat ..., zpracovat,
... model je ve svém oboru zajímavý/ojedinělý v ...).

grafy mají své náležitosti - identifikační název grafu (případně jeho číslo),
cejchované osy s názvem veličiny na dané ose (včetně její jednotky). V případě
grafu kombinujícího více jevů i legenda dokumentující grafické vyjádření jevů v
grafu.

veškeré tabulky a grafy musí být komentovány v textu - čtenáři musí
řečeno, co v tom grafu uvidí a čeho si má všimnout.

** Kdo se na práci podílel jako autor, odborný konzultant, dodavatel odborných faktů, význačné zdroje literatury/fakt, ...
je ideální, pokud jste vaši koncepci konzultovali s nějakou autoritou v oboru (v
IMS projektu to je hodnoceno, ovšem není vyžadováno)

pokud nebudete mít odborného konzultanta, nevadí. Nelze ovšem tvrdit, že jste
celé dílo vymysleli s nulovou interakcí s okolím a literaturou.
** V jakém prostředí a za jakých podmínek probíhalo experimentální ověřování validity modelu
pokud čtenář/zadavatel vaší zprávy neuvěří ve validitu vašeho modelu, obvykle
vaši práci odmítne už v tomto okamžiku.

* Rozbor tématu a použitých metod/technologií
Shrnutí všech podstatných faktů, které se týkají zkoumaného systému (co možná
nejvěcnějším a technickým (ideálně formálně matematickým) přístupem, žádné
literární příběhy).

Podstatná fakta o systému musí být zdůvodněna a podepřena důvěryhodným zdrojem
(vědecký článek, kniha, osobní měření a zjišťování). Pokud budete tvrdit, že
ovce na pastvě sežere dvě kila trávy za den, musí existovat jiný (důvěryhodný)
zdroj, který to potvrdí.

Toto shrnutí určuje míru důvěryhodnosti vašeho modelu (nikdo nechce výsledky z
nedůvěryhodného modelu). Pokud nebudou uvedeny zdroje faktů o vašem systému,
hrozí ztráta bodů.

** Popis použitých postupů pro vytvoření modelu a zdůvodnění, proč jsou pro zadaný problém vhodné.
Zdůvodnění může být podpořeno ukázáním alternativního přístupu a srovnáním s tím
vaším. Čtenář musí mít jistotu, že zvolené nástroje/postupy/technologie jsou
ideální pro řešení zadaného problému (ovšem, "dělám to v Javě, protože
momentálně Java frčí..." nemusí zadavatele studie uspokojit).

** Popis původu použitých metod/technologií
(odkud byly získány (odkazy), zda-li jsou vytvořeny autorem) - převzaté části
dokumentovat (specificky, pokud k nim přísluší nějaké autorské
oprávnění/licence).

Zdůvodnit potřebu vytvoření vlastních metod/nástrojů/algoritmů. Ve většině
případů budete přebírat již navržené metody/algoritmy/definice/nástroje a je to
pro školní projekt typické. Stejně tak je typické, že studenti chybně vymýšlí
již hotové věci a dojdou k naprostému nesmyslu - je třeba toto nebezpečí
eleminovat v tomto zdůvodnění.

Velmi důležité, až fanaticky povinné, kontrolované a hodnocené: na každém místě
v textu, kde se poprvé objeví pojem z předmětu IMS bude v závorce uveden odkaz
na předmět a číslo slajdu, na kterém je pojem definován. Pokud bude významný
pojem z předmětu IMS takto nedokumentován v textu a zjevně bude používán
nevhodným nebo nepřesným způsobem, bude tento fakt hodnocen bodovou
ztrátou. Tento požadavek je míněn s naprostou vážností.

Cílem je vyhnout se studentské tvůrčí činnosti ve vysvětlování známých pojmů,
což mnohdy vede k naprostým bludům, ztrátě bodů a zápočtů. Pokud student pojem
cituje korektně a přesto nekorektně používá, bude to hodnoceno dvojnásobnou
bodovou ztrátou.

* Koncepce
Konceptuální model je abstrakce reality a redukce reality na soubor relevantních
faktů pro sestavení simulačního modelu. Předpokládáme, že model bude obsahovat
fakta z "Rozboru tématu". Pokud jsou některá vyřazena nebo modifikována, je nuto
to zde zdůvodnit (například: zkoumaný subjekt vykazuje v jednom procentu případů
toto chování, ovšem pro potřeby modelu je to naprosto marginální a smíme to
zanedbat, neboť ...).

Pokud některé partie reality zanedbáváte nebo zjednodušujete, musí to být
zdůvodněno a v ideálním případě musí být prokázáno, že to neovlivní validitu
modelu. Cílem konceptuálního (abstraktního) modelu je formalizovat relevantní
fakta o modelovaném systému a jejich vazby. Podle koncept. modelu by měl být
každý schopen sestavit simulační model.

** Způsob vyjádření konceptuálního modelu musí být zdůvodněn
(na obrázku xxx je uvedeno schéma systému, v rovnicích xx-yy jsou popsány vazby
mezi ..., způsob synchronizace procesů je na obrázku xxx s Petriho sítí).

** Formy konceptuálního modelu
Podle potřeby uveďte konkrétní relevantní:
- obrázek/náčrt/schéma/mapa (možno čitelně rukou)
- matematické rovnice - u některých témat (např. se spojitými prvky,
  optimalizace, ...) naprosto nezbytné. Dobré je chápat, že veličiny (fyzikální,
  technické, ekonomické) mají jednotky, bez kterých údaj nedává smysl.
- stavový diagram (konečný automat) nebo Petriho síť - spíše na abstraktní
  úrovni. Petriho síť nemá zobrazovat výpočty a přílišné detaily. Pokud se
  pohodlně nevejde na obrazovku, je nepoužitelná. Možno rozdělit na bloky se
  zajímavými detaily a prezentovat odděleně abstraktní celek a podrobně
  specifikované bloky (hierarchický přístup).

Popište abstraktně architekturu vašeho programu, princip jeho činnosti, významné
datové struktury a podobně. Smyslem této kapitoly je podat informaci o programu
bez použití názvů tříd, funkcí a podobně.

Tuto kapitolu by měl pochopit každý technik i bez informatického
vzdělání. Vyjadřovacími prostředky jsou vývojové diagramy, schémata, vzorce,
algoritmy v pseudokódu a podobně. Musí zde být vysvětlena nosná myšlenka vašeho
přístupu.

* Architektura simulačního modelu
Tato kapitola má různou důležitost pro různé typy zadání. U implementačních
témat lze tady očekávat jádro dokumentace. Zde můžete využít zajímavého prvku ve
vašem simulačním modelu a tady ho "prodat".

Minimálně je nutno ukázat mapování abstraktního (koncept.) modelu do simulačního
(resp. simulátoru). Např. které třídy odpovídají kterým procesům/veličinám a
podobně.

* Podstata simulačních experimentů a jejich průběh
Nezaměňujte pojmy testování a experimentování (důvod pro bodovou ztrátu)!!!

Zopakovat/shrnout co přesně chcete zjistit experimentováním a proč k tomu
potřebujete model. Pokud experimentování nemá cíl, je celý projekt špatně.

Je celkem přípustné u experimentu odhalit chybu v modelu, kterou na základě
experimentu opravíte. Pokud se v některém experimentu nechová model podle
očekávání, je nutné tento experiment důkladně prověřit a chování modelu
zdůvodnit (je to součást simulačnické profese).

Pokud model pro některé vstupy nemá důvěryhodné výsledky, je nutné to
zdokumentovat. Pochopitelně model musí mít důvěryhodné výsledky pro většinu
myslitelných vstupů.

** Naznačit postup experimentování
jakým způsobem hodláte prostřednictvím experimentů dojít ke svému cíli (v
některých situacích je přípustné "to zkoušet tak dlouho až to vyjde", ale i ty
musí mít nějaký organizovaný postup).

** Dokumentace jednotlivých experimentů
souhrn vstupních podmínek a podmínek běhu simulace, komentovaný výpis výsledků,
závěr experimentu a plán pro další experiment (např. v experimentu 341. jsem
nastavil vstup x na hodnotu X, která je typická pro ... a vstup y na Y, protože
chci zjistit chování systému v prostředi ... Po skončení běhu simulace byly
získány tyto výsledky ..., kde je nejzajímavější hodnota sledovaných veličin
a,b,c které se chovaly podle předpokladu a veličin d,e,f které ne. Lze z toho
usoudit, že v modelu není správně implementováno chování v podmínkách ... a
proto v následujících experimentech budu vycházet z modifikovaného modelu verze
... Nebo výsledky ukazují, že systém v těchto podmínkách vykazuje značnou
citlivost na parametr x ... a proto bude dobré v dalších experimentech přesně
prověřit chování systému na parametr x v intervalu hodnot ... až ...)

** Závěry experimentů
bylo provedeno N experimentů v těchto situacích ... V průběhu experimentování
byla odstraněna ... chyba v modelu. Z experimentů lze odvodit chování systémů s
dostatečnou věrohodností a experimentální prověřování těchto ... situací již
napřinese další výsledky, neboť ...

* Shrnutí simulačních experimentů a závěr
Závěrem dokumentace se rozumí zhodnocení simulační studie a zhodnocení
experimentů (např. Z výsledků experimentů vyplývá, že ... při předpokladu, že
... Validita modelu byla ověřena ... V rámci projektu vznikl nástroj ..., který
vychází z ... a byl implementován v ...).

do závěru se nehodí psát poznámky osobního charakteru (např. práce na projektu
mě bavila/nebavila, ...). Technická zpráva není osobní příběh autora.

absolutně nikoho nezajímá, kolik úsilí jste projektu věnovali, důležitá je pouze
kvalita zpracování simulátoru/modelu a obsažnost simulační studie (rozhodně ne
např.: projekt jsem dělal ... hodin, což je víc než zadání
předpokládalo. Program má ... řádků kódu). Pokud zdůrazňujete, že jste práci
dělali významně déle než se čekalo, pak tím pouze demonstrujete vlastní
neschopnost (to platí zejména v profesním životě).

do závěru se velmi nehodí psát "auto-zhodnocení" kvality práce, to je výhradně
na recenzentovi/hodnotiteli (např. v projektu jsem zcela splnil zadání a
domnívám se, že můj model je bezchybný a výsledky taktéž). Statisticky častý je
pravý opak autorova auto-zhodnocení. Pokud přesto chcete vyzdvihnout kvalitu
svého díla (což je dobře), tak vaše výroky musí být naprosto nepopiratelně
zdůvodněny a prokázány (např. pomocí jiného referenčního přístupu, matematického
důkazu, analýzy, ...).
